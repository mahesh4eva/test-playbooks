#!/usr/bin/env bash

function retrieve_boolean_value {

    value=$1
    case "${value}" in
        yes)
            echo 'true'
            ;;
        no)
            echo 'false'
            ;;
        *)
            >&2 echo "\"${value}\": specified value cannot be casted into boolean type."
            exit 1
            ;;
    esac
}

function retrieve_credential_file {

    inventory=$1
    tower_host=$(retrieve_tower_server_from_inventory "${inventory}")
    tower_user=$(retrieve_system_user_from_inventory "${inventory}")


    if grep 'ansible_connection=docker' "${inventory}" > /dev/null; then
        echo 'config/credentials.yml'
    else
        is_fips_enabled=$(ssh -ostricthostkeychecking=no "${tower_user}"@"${tower_host}" cat /proc/sys/crypto/fips_enabled)
        if [[ "${is_fips_enabled}" == 1 ]]; then
            echo 'config/credentials-pkcs8.yml'
        else
            echo 'config/credentials.yml'
        fi
    fi
}

function retrieve_inventory_file {

    if [[ -f "playbooks/inventory.log" ]]; then
        echo "playbooks/inventory.log"
    else
        echo "playbooks/inventory.cluster"
    fi
}

function generate_instance_name_prefix {

    instance_name_prefix=$1
    platform=$2
    ansible_version=$3
    tower_version=$4

    echo "${instance_name_prefix}-tower-${tower_version}-ansible-${ansible_version}-${platform}"
}

# shellcheck disable=2034
function setup_env_based_on_deployment_scenario {

    scenario=$1

    case "${scenario}" in
       openshift)
           INVENTORY=playbooks/inventory.openshift
           VARS_FILE=playbooks/vars.yml
           # FIXME(spredzy): State for compatibility
           # to be removed when cloud_vars_from_env
           # is updated
           PLAYBOOK=playbooks/deploy-tower.yml
           IMAGE_VARS=playbooks/images-ec2.yml
           ;;
       standalone)
           PLAYBOOK=playbooks/deploy-tower.yml
           INVENTORY=playbooks/inventory.log
           IMAGE_VARS=playbooks/images-ec2.yml
           VARS_FILE=playbooks/vars.yml
           ;;
       cluster)
           PLAYBOOK=playbooks/deploy-tower-cluster.yml
           INVENTORY=playbooks/inventory.cluster
           IMAGE_VARS=playbooks/images-isolated-groups.yml
           VARS_FILE=playbooks/vars.yml
           export CLUSTER_SETUP=true
           ;;
       test_runner)
           PLAYBOOK=playbooks/deploy-tower-cluster.yml
           INVENTORY=playbooks/inventory.test_runner
           VARS_FILE=playbooks/test_runner_vars.yml
           IMAGE_VARS=playbooks/images-test-runner.yml
           INSTANCE_NAME_PREFIX=test-runner-${PLATFORM}-${INSTANCE_NAME_PREFIX}
           # If the tower platform is RHEL 8.X, deploy a RHEL 8.X test-runner,
           # otherwise just deploy a RHEL 7.7 test-runner
           if [[ ! "$PLATFORM" =~ 'rhel-8' ]] ; then
               PLATFORM='rhel-7.7-x86_64'
           fi
           AWX_IPV6_DEPLOYMENT=no
           ;;
       *)
           (>&2 echo "\"${scenario}\" is not a supported scenario. Supported scenarios: standalone, cluster, openshift and test_runner.")
           exit 1
           ;;
    esac
}

function retrieve_version_branch {

    version=$1

    if [[ "${version}" == "devel" ]]; then
        echo "devel"
    else
        echo "release_${version}"
    fi
}

function retrieve_aw_repo_url_based_on_version {

    if [[ "${FROM_STAGE}" == "yes" ]]; then
        echo "http://releases-master.ansible.com/ansible-tower-8a782eb3d5f796bac1dcfb9916757b1fde7500d2"
    else
        version=$1
        url="https://releases.ansible.com/ansible-tower/setup-bundle/ansible-tower-setup-bundle-${version}-1.el7.tar.gz"
        http_code=$(curl -L -s -o /dev/null -I -w "%{http_code}" "${url}")

        if [[ "${http_code}" == "200" ]]; then
            echo 'https://releases.ansible.com/ansible-tower'
        else
            url="http://nightlies.testing.ansible.com/ansible-tower_nightlies_m8u16fz56qr6q7/release_${version}"
            http_code=$(curl -L -s -o /dev/null -I -w "%{http_code}" "${url}")
            if [[ "${http_code}" == "200"  ]]; then
                echo "http://nightlies.testing.ansible.com/ansible-tower_nightlies_m8u16fz56qr6q7/release_${version}"
            else
               url="http://nightlies.testing.ansible.com/ansible-tower_nightlies_m8u16fz56qr6q7/${version}"
               http_code=$(curl -L -s -o /dev/null -I -w "%{http_code}" "${url}")
               if [[ "${http_code}" == "200"  ]]; then
                   echo "http://nightlies.testing.ansible.com/ansible-tower_nightlies_m8u16fz56qr6q7/${version}"
               else
                   >&2 echo "\"${version}\": specified version cannot be found."
                   exit 1
               fi
            fi
        fi
    fi
}

function retrieve_awx_setup_path_based_on_version_and_scenario {

    version=$1
    scenario=$2
    aw_repo_url=$3
    bundle=$4
    platform=$5

    if [[ "${platform}" =~ 'rhel-8' ]]; then
        _platform='el8'
    else
        _platform='el7'
    fi

    if [[ "${aw_repo_url}" =~ .*"nightlies.testing.ansible.com".* ]]; then
        if [[ "${bundle}" == "yes" ]]; then
            echo "/setup-bundle/ansible-tower-setup-bundle-latest.${_platform}.tar.gz"
        elif [[ "${scenario}" == "openshift" ]]; then
            echo "/setup_openshift/ansible-tower-openshift-setup-latest.tar.gz"
        else
            echo "/setup/ansible-tower-setup-latest.tar.gz"
        fi
    else
        if [[ "${bundle}" == "yes" ]]; then
            echo "/setup-bundle/ansible-tower-setup-bundle-${version}-1.${_platform}.tar.gz"
        elif [[ "${scenario}" == "openshift" ]]; then
            echo "/setup_openshift/ansible-tower-openshift-setup-${version}.tar.gz"
        else
            echo "/setup/ansible-tower-setup-${version}-1.tar.gz"
        fi
    fi
}

function retrieve_verbosity_string {

    if [[ "${VERBOSE}" == "yes" ]]; then
        echo '-vvvv'
    else
        echo '-v'
    fi
}

function retrieve_tower_server_from_inventory {

    inventory=$1
    if grep cluster_installer "${inventory}" > /dev/null; then
        grep -A 1 cluster_installer "${inventory}" | tail -n 1 | cut -d' ' -f 1
    else
        grep -A 1 tower "${inventory}" | tail -n 1 | cut -d' ' -f 1
    fi
}

function retrieve_system_user_from_inventory {

    inventory=$1
    if grep cluster_installer "${inventory}" > /dev/null; then
        grep -A 1 cluster_installer "${inventory}" | grep -o 'ansible_user=\S*' | cut -d= -f2
    else
        grep -A 1 tower "${inventory}" | grep -o 'ansible_user=\S*' | cut -d= -f2
    fi
}

function is_tower_cluster {
    local inventory="$1"
    if grep -q "cluster_installer" "${inventory}"; then
        return 0
    else
        return 1
    fi
}

function is_tower_ready {

    tower_url=$1
    http_code=$(curl -k -s -o /dev/null -I -w "%{http_code}" "${tower_url}/api/v2/ping/")
    if [[ "${http_code}" == 200 ]]; then
        return 0
    else
        return 1
    fi
}

function retrieve_deployment_type {

  url=$1
  # TODO(spredzy): Look at the license endpoint and return 'tower' or 'awx'
  echo 'tower'
}


function setup_python3_env {

    # If `python` exists, use it, otherwise use python3
    if hash python 2>/dev/null ; then
        INVENV=$(python -c 'import sys; print ("1" if hasattr(sys, "real_prefix") else "0")')
        PY_VERSION="$(python --version 2>&1)"
    else
        INVENV=$(python3 -c 'import sys; print ("1" if hasattr(sys, "real_prefix") else "0")')
        PY_VERSION="$(python3 --version 2>&1)"
    fi

    if [[ "$PY_VERSION" =~ Python\ 3.\.* ]] && [[ "${INVENV}" == "1" ]]; then
        true
    elif [ "$(grep -s "python3" tox.ini)" ]; then
        [[ "${INVENV}" == "1" ]] && deactivate || true
        mkdir -p "${HOME}/venvs"
        venv_path="${HOME}/venvs/${1:-venv}"
        if [ ! -d "${venv_path}" ]; then
            python3.6 -m venv "${venv_path}"
        fi
        # shellcheck disable=SC1090
        source "${venv_path}/bin/activate"
    fi

    # Ensure pip is updated
    pip install -U pip wheel setuptools
}

function retrieve_value_from_vars_file {

    FILE=$1
    KEY=$2

    grep "^${KEY}:" "${FILE}" | cut -d' ' -f2
}

function is_rhel8 {

    FILE=$1
    if grep 'rhel-8' "${FILE}" > /dev/null; then
        return 0
    else
        return 1
    fi
}

# OpenShit Related Methods
#

function openshift_login {
    oc --token="${OPENSHIFT_TOKEN}" login \
        https://console.ocp3.ansible.eng.rdu2.redhat.com:8443 \
        --insecure-skip-tls-verify=true
}

function openshift_bootstrap_project {

    PROJ=$1

    set +e
    oc get project "${PROJ}" 2>&1 > /dev/null
    rc=$?
    set -e

    if [[ "${rc}" == 0 ]]; then
        oc delete dc --all -n "${PROJ}"
        oc delete deploy --all -n "${PROJ}"
        oc delete sts --all -n "${PROJ}"
        oc delete pods --all --force --grace-period=0 -n "${PROJ}"
        oc delete svc --all -n "${PROJ}"
        oc delete route --all -n "${PROJ}"
        oc delete secret postgresql --ignore-not-found -n "${PROJ}"
    else
        oc new-project "${PROJ}" 2>&1 > /dev/null
    fi
}
