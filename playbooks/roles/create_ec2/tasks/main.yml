---
- include_role:
    name: terminate_ec2
  when: delete_on_start | default(true) | bool

- name: Ensure security groups exist
  ec2_group:
    aws_access_key: '{{ aws_access_key }}'
    aws_secret_key: '{{ aws_secret_key }}'
    state: present
    name: '{{ item.name }}'
    description: '{{ item.description }}'
    region: '{{ ec2_region }}'
    rules: '{{ item.rules }}'
    vpc_id: '{{ create_ec2_vpc_id|default(omit) }}'
  when: ec2_security_groups and ec2_images
  with_items: '{{ ec2_security_groups|default([]) }}'

- name: Ensure keypair exists
  ec2_key:
    aws_access_key: '{{ aws_access_key }}'
    aws_secret_key: '{{ aws_secret_key }}'
    region: '{{ ec2_region }}'
    name: '{{ ec2_key_name }}'
    key_material: "{{ ec2_public_key|default('') }}"
  when: ec2_images

- name: create/locate ec2 instance(s)
  ec2_instance:
    aws_access_key: '{{ aws_access_key }}'
    aws_secret_key: '{{ aws_secret_key }}'
    name: '{{ec2_name_prefix}}-{{item.name}}'
    region: '{{ ec2_region }}'
    instance_type: '{{ item.type|default(ec2_instance_type) }}'
    security_group: '{{ item.security_group|default(ec2_security_group) }}'
    key_name: '{{ ec2_key_name }}'
    image_id: '{{ item.id }}'
    volumes:
      - device_name: /dev/sda1
        ebs:
          volume_type: gp2
          volume_size: 15
          delete_on_termination: true
    vpc_subnet_id: '{{ create_ec2_vpc_subnet_id|default(omit) }}'
    network:
      assign_public_ip: '{{ create_ec2_assign_public_ip|default(omit) }}'
    user_data: '{{ item.user_data|default(omit) }}'
    wait: '{{ create_ec2_wait_upon_creation | default(false) | bool }}'
    wait_timeout: '{{ create_ec2_wait_upon_creation_timeout|default(600) }}'
    tags:
      ANSIBLE_INSTALL_METHOD: '{{ ansible_install_method|default("nightly") }}'
      controller: "{{ item.controller|default('') }}"
      Test-Flag-2202: 'Replace-Dash-In-Groups'
      Ice: '{{ec2_name_prefix}}'
      Owner: '{{ lookup("env","USER") }}'
      host-type: '{{item.name}}'
      towerqe-user: '{{ item.user }}'
      towerqe-groups: '{{ item.groups }}'
  with_items: '{{ ec2_images }}'
  register: ec2_create_vars

- name: ensure public dns name provided by aws
  ec2_instance_facts:
    aws_access_key: '{{ aws_access_key }}'
    aws_secret_key: '{{ aws_secret_key }}'
    region: '{{ ec2_region }}'
    instance_ids: '{{ ec2_create_vars.results | sum(attribute="instance_ids", start=[]) }}'
  register: ec2_instance_vars
  until:
    - "ec2_instance_vars.instances is defined"
    - "ec2_images | length == ec2_instance_vars.instances | length"
    - "ec2_instance_vars.instances | selectattr('public_dns_name', 'match', '^.+$') | list | length  ==  ec2_instance_vars.instances | length"
  retries: 60
  delay: 15

- name: extract helpful ec2_create_vars (IPv4)
  set_fact:
    ec2_host_vars: "{{  ec2_host_vars|default([]) + [{'id': item.instance_id,
                                                      'name': item.tags['host-type'],
                                                      'groups': item.tags['towerqe-groups'],
                                                      'public_ip': item.public_ip_address,
                                                      'public_dns_name': item.public_dns_name,
                                                      'user': item.tags['towerqe-user'],
                                                      'controller': item.tags['controller']|default('') }] }}"
  with_items: '{{ ec2_instance_vars.instances|default([]) }}'
  when: not awx_ipv6_deployment | default(false) | bool

- name: extract helpful ec2_create_vars (IPv6)
  set_fact:
    ec2_host_vars: "{{  ec2_host_vars|default([]) + [{'id': item.instance_id,
                                                      'name': item.tags['host-type'],
                                                      'groups': item.tags['towerqe-groups'],
                                                      'public_ip': item.network_interfaces[0].ipv6_addresses[0].ipv6_address,
                                                      'public_dns_name': item.public_dns_name,
                                                      'user': item.tags['towerqe-user'],
                                                      'controller': item.tags['controller']|default('') }] }}"
  with_items: '{{ ec2_instance_vars.instances|default([]) }}'
  when: awx_ipv6_deployment | default(false) | bool

# NOTE: We are not using `wait_for` module + search_regex OpenSSH
# because a bug causes us to hit ConnectionResetError: [Errno 104] Connection reset by peer
# from time to time
- name: wait for instances to listen on port:22
  raw: 'ssh -o StrictHostKeyChecking=no {{ item.user  }}@{{ item.public_ip  }} "/bin/sh -c \"ls\""'
  register: ls
  until: ls.rc == 0
  retries: 60
  delay: 10
  with_items: '{{ ec2_host_vars|default([]) }}'

- name: Set ansible_python_interpreter (RHEL8)
  set_fact:
    remote_ansible_python_interpreter: /usr/libexec/platform-python
  when: "'rhel-8' in ec2_images[0].name"

- name: Set ansible_python_interpreter (Debian/Pre RHEL8)
  set_fact:
    remote_ansible_python_interpreter: /usr/bin/env python
  when: not 'rhel-8' in ec2_images[0].name

- name: add_host
  add_host:
    name: '{{ item.public_dns_name }}'
    groups: 'cloud,ec2,{{ item.name }},{{item.groups|default("")}}'
    ansible_user: '{{ item.user }}'
    ansible_host: '{{ item.public_ip }}'
    ansible_python_interpreter: '{{ remote_ansible_python_interpreter }}'
    controller: '{{item.controller|default("")}}'
    # ansible_ssh_private_key_file: '{{ ec2_keypair_private }}'
  with_items: '{{ ec2_host_vars|default([]) }}'
